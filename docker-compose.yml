version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: teachai-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-teachai}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - teachai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: teachai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - teachai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Backend API (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    container_name: teachai-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 4000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DB_NAME:-teachai}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      FLASK_API_URL: http://flask-ai:5000
      FLASK_API_KEY: ${FLASK_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/public
    networks:
      - teachai-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Flask AI Service
  flask-ai:
    build:
      context: ./flaskApi
      dockerfile: Dockerfile
      target: ${PYTHON_ENV:-production}
    container_name: teachai-flask-ai
    restart: unless-stopped
    environment:
      FLASK_ENV: ${PYTHON_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FLASK_API_KEY: ${FLASK_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "${FLASK_PORT:-5000}:5000"
    volumes:
      - flask_cache:/app/Cache
      - flask_data:/app/ChatData
      - flask_history:/app/ChatHistory
      - flask_presentations:/app/GeneratedPresentations
      - flask_questions:/app/Questions
      - flask_quizzes:/app/Quizzes
      - flask_uploads:/app/demo/uploads
      - flask_logs:/app/logs
    networks:
      - teachai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend (React with Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${REACT_ENV:-production}
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:4000/api/v1}
        REACT_APP_FLASK_URL: ${REACT_APP_FLASK_URL:-http://localhost:5000}
    container_name: teachai-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${REACT_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - teachai-network
    depends_on:
      - backend
      - flask-ai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - for production scaling)
  nginx:
    image: nginx:alpine
    container_name: teachai-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - teachai-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes for persistent data
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  flask_cache:
    driver: local
  flask_data:
    driver: local
  flask_history:
    driver: local
  flask_presentations:
    driver: local
  flask_questions:
    driver: local
  flask_quizzes:
    driver: local
  flask_uploads:
    driver: local
  flask_logs:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  teachai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16